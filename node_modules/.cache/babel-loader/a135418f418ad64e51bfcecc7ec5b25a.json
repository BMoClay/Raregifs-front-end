{"ast":null,"code":"var _jsxFileName = \"/Users/benmorgan-cleveland/Development/code/Mod5/Raregifs-front-end/raregifs/src/Components/StoragePage.js\";\nimport React, { useEffect, useState } from 'react';\nimport StorageList from './StorageList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StoragePage({\n  currentUser,\n  acquisitions,\n  setAcquisitions\n}) {\n  function handleDeleteAcquisition(id) {\n    const updatedAcquisitionsArray = storedAcquisitions.filter(acquisition => acquisition.id !== id);\n    setStoredAcquisitions(updatedAcquisitionsArray);\n  }\n\n  function handleUpdateArtwork(updatedArtwork) {\n    const updatedArtworksArray = storedUserArtworks.map(artwork => {\n      if (artwork.id === updatedArtwork.id) {\n        return updatedArtwork;\n      } else {\n        return artwork;\n      }\n    });\n    setStoredUserArtworks(updatedArtworksArray);\n  }\n\n  function handleDeleteArtwork(id) {\n    const updatedArtworksArray = storedUserArtworks.filter(artwork => artwork.id !== id);\n    setStoredUserArtworks(updatedArtworksArray);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"storage\",\n    children: /*#__PURE__*/_jsxDEV(StorageList, {\n      currentUser: currentUser,\n      storedUserArtworks: storedUserArtworks,\n      storedAcquisitions: storedAcquisitions,\n      onDeleteAcquisition: handleDeleteAcquisition,\n      onDeleteArtwork: handleDeleteArtwork,\n      onUpdateArtwork: handleUpdateArtwork\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n}\n\n_c = StoragePage;\nexport default StoragePage; // const [storedAcquisitions, setStoredAcquisitions] = useState([])\n// const [storedUserArtworks, setStoredUserArtworks] = useState([]) \n// const { id } = currentUser;\n// console.log(id)\n// useEffect(() => {\n//   fetch(`http://localhost:3000/users/${id}/acquisitions`)\n//       .then(r => r.json())\n//       .then(userAcquisitionsArray => {\n//           setStoredAcquisitions(userAcquisitionsArray);\n//       })\n// }, [])\n// useEffect(() => {\n//   fetch(`http://localhost:3000/users/${id}/artworks`)\n//       .then(r => r.json())\n//       .then(userArtworksArray => {\n//           setStoredUserArtworks(userArtworksArray);\n//       })\n// }, [])\n\nvar _c;\n\n$RefreshReg$(_c, \"StoragePage\");","map":{"version":3,"sources":["/Users/benmorgan-cleveland/Development/code/Mod5/Raregifs-front-end/raregifs/src/Components/StoragePage.js"],"names":["React","useEffect","useState","StorageList","StoragePage","currentUser","acquisitions","setAcquisitions","handleDeleteAcquisition","id","updatedAcquisitionsArray","storedAcquisitions","filter","acquisition","setStoredAcquisitions","handleUpdateArtwork","updatedArtwork","updatedArtworksArray","storedUserArtworks","map","artwork","setStoredUserArtworks","handleDeleteArtwork"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,YAAf;AAA6BC,EAAAA;AAA7B,CAArB,EAAqE;AAInE,WAASC,uBAAT,CAAiCC,EAAjC,EAAqC;AACnC,UAAMC,wBAAwB,GAAGC,kBAAkB,CAACC,MAAnB,CAA2BC,WAAD,IAAiBA,WAAW,CAACJ,EAAZ,KAAmBA,EAA9D,CAAjC;AACAK,IAAAA,qBAAqB,CAACJ,wBAAD,CAArB;AACD;;AAED,WAASK,mBAAT,CAA6BC,cAA7B,EAA6C;AAC3C,UAAMC,oBAAoB,GAAGC,kBAAkB,CAACC,GAAnB,CAAwBC,OAAD,IAAa;AAC/D,UAAIA,OAAO,CAACX,EAAR,KAAeO,cAAc,CAACP,EAAlC,EAAsC;AAClC,eAAOO,cAAP;AACH,OAFD,MAEO;AACH,eAAOI,OAAP;AACH;AACF,KAN4B,CAA7B;AAOAC,IAAAA,qBAAqB,CAACJ,oBAAD,CAArB;AACD;;AAED,WAASK,mBAAT,CAA6Bb,EAA7B,EAAiC;AAC/B,UAAMQ,oBAAoB,GAAGC,kBAAkB,CAACN,MAAnB,CAA2BQ,OAAD,IAAaA,OAAO,CAACX,EAAR,KAAeA,EAAtD,CAA7B;AACAY,IAAAA,qBAAqB,CAACJ,oBAAD,CAArB;AACD;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACE,QAAC,WAAD;AACG,MAAA,WAAW,EAAEZ,WADhB;AAEG,MAAA,kBAAkB,EAAEa,kBAFvB;AAGG,MAAA,kBAAkB,EAAEP,kBAHvB;AAIG,MAAA,mBAAmB,EAAEH,uBAJxB;AAKG,MAAA,eAAe,EAAEc,mBALpB;AAMG,MAAA,eAAe,EAAEP;AANpB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAYD;;KArCQX,W;AAuCT,eAAeA,WAAf,C,CAEC;AACC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport StorageList from './StorageList'\n\nfunction StoragePage({ currentUser, acquisitions, setAcquisitions }) {\n  \n \n\n  function handleDeleteAcquisition(id) {\n    const updatedAcquisitionsArray = storedAcquisitions.filter((acquisition) => acquisition.id !== id);\n    setStoredAcquisitions(updatedAcquisitionsArray);\n  } \n\n  function handleUpdateArtwork(updatedArtwork) {\n    const updatedArtworksArray = storedUserArtworks.map((artwork) => {\n      if (artwork.id === updatedArtwork.id) {\n          return updatedArtwork;\n      } else {\n          return artwork;\n      }\n    })\n    setStoredUserArtworks(updatedArtworksArray);\n  }\n\n  function handleDeleteArtwork(id) {\n    const updatedArtworksArray = storedUserArtworks.filter((artwork) => artwork.id !== id);\n    setStoredUserArtworks(updatedArtworksArray);\n  }  \n\n  return (\n      <div className=\"storage\" >\n        <StorageList\n           currentUser={currentUser}\n           storedUserArtworks={storedUserArtworks}\n           storedAcquisitions={storedAcquisitions}\n           onDeleteAcquisition={handleDeleteAcquisition}\n           onDeleteArtwork={handleDeleteArtwork}\n           onUpdateArtwork={handleUpdateArtwork}\n        />\n      </div>\n  );\n}\n\nexport default StoragePage;\n\n // const [storedAcquisitions, setStoredAcquisitions] = useState([])\n  // const [storedUserArtworks, setStoredUserArtworks] = useState([]) \n  // const { id } = currentUser;\n\n  // console.log(id)\n  // useEffect(() => {\n  //   fetch(`http://localhost:3000/users/${id}/acquisitions`)\n  //       .then(r => r.json())\n  //       .then(userAcquisitionsArray => {\n  //           setStoredAcquisitions(userAcquisitionsArray);\n  //       })\n  // }, [])\n\n  // useEffect(() => {\n  //   fetch(`http://localhost:3000/users/${id}/artworks`)\n  //       .then(r => r.json())\n  //       .then(userArtworksArray => {\n  //           setStoredUserArtworks(userArtworksArray);\n  //       })\n  // }, [])"]},"metadata":{},"sourceType":"module"}